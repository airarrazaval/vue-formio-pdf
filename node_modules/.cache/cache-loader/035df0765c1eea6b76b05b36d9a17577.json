{"remainingRequest":"/home/alfredo/Code/vue-formio-pdf/node_modules/babel-loader/lib/index.js!/home/alfredo/Code/vue-formio-pdf/node_modules/vue-loader/lib/selector.js?type=script&index=0!/home/alfredo/Code/vue-formio-pdf/src/components/Formio/FormioGrid.vue","dependencies":[{"path":"/home/alfredo/Code/vue-formio-pdf/src/components/Formio/FormioGrid.vue","mtime":1521990674792},{"path":"/home/alfredo/Code/vue-formio-pdf/package.json","mtime":1521932240841},{"path":"/home/alfredo/Code/vue-formio-pdf/node_modules/cache-loader/dist/cjs.js","mtime":1521810301903},{"path":"/home/alfredo/Code/vue-formio-pdf/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/home/alfredo/Code/vue-formio-pdf/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FormioUtils from 'formiojs/utils';\nexport default {\n  name: 'formio-grid',\n  data: function data() {\n    return {};\n  },\n  methods: {\n    getData: function getData(values) {\n      var data = {\n        data: {}\n      };\n      data.data[this.component.key] = values;\n      return data;\n    }\n  },\n  props: ['component', 'data'],\n  computed: {\n    values: function values() {\n      var values = FormioUtils.getValue(this.data, this.component.key) || [];\n      return values;\n    },\n    components: function components() {\n      return this.component ? this.component.components : [];\n    },\n    transpose: function transpose() {\n      return this.values.length < this.components.length;\n    }\n  }\n};",{"version":3,"sources":["FormioGrid.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AAEA;QAEA;wBACA;WAEA,AACA;AACA;;sCAEA;;cACA;;sCACA;aACA;AACA,AACA;AANA;uBAOA;;8BAEA;0EACA;aACA;AACA;sCACA;0DACA;AACA;oCACA;kDACA;AACA,AACA;AAXA;AAfA","sourceRoot":"src/components/Formio","sourcesContent":["<template>\n    <div>\n        <h3 v-if=\"component.label\">{{ component.label }}</h3>\n        <hr />\n        <table class=\"table table-condensed table-striped\">\n          <thead v-if=\"!transpose\">\n            <tr>\n              <th v-for=\"column in components\" :key=\"column.key\">{{ column.label }}</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"i in values.length\" :key=\"i\" v-if=\"!transpose\">\n              <td v-for=\"column in components\" :key=\"column.key\">\n                <formio-container :components=\"[ column ]\" :data=\"getData(values[i])\" />\n              </td>\n            </tr>\n            <tr v-for=\"column in components\" :key=\"column.key\" v-if=\"transpose\">\n              <th>{{ column.label }}</th>\n              <td v-for=\"i in values.length\" :key=\"i\">\n                <formio-container :component=\"[ column ]\" :data=\"getData(values[i])\" />\n              </td> \n            </tr>\n          </tbody>\n        </table>\n    </div>\n</template>\n\n<script>\nimport FormioUtils from 'formiojs/utils'\n\nexport default {\n  name: 'formio-grid',\n  data() {\n    return {\n      \n    };\n  },\n  methods: {\n    getData (values) {\n      let data = {data: {}}\n      data.data[this.component.key] = values\n      return data\n    }\n  },\n  props: [ 'component', 'data' ],\n  computed: {\n    values () {\n      let values = FormioUtils.getValue(this.data, this.component.key) || []\n      return values\n    },\n    components () {\n      return this.component ? this.component.components : []\n    },\n    transpose () {\n      return this.values.length < this.components.length\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\ntable {\n  font-size: 10px;\n}\n</style>\n"]}]}