{"remainingRequest":"/home/alfredo/Code/vue-pdf/node_modules/babel-loader/lib/index.js!/home/alfredo/Code/vue-pdf/node_modules/vue-loader/lib/selector.js?type=script&index=0!/home/alfredo/Code/vue-pdf/src/utils/render/components/DataGridRender.vue","dependencies":[{"path":"/home/alfredo/Code/vue-pdf/src/utils/render/components/DataGridRender.vue","mtime":1521744129977},{"path":"/home/alfredo/Code/vue-pdf/package.json","mtime":1521738573308},{"path":"/home/alfredo/Code/vue-pdf/node_modules/cache-loader/dist/cjs.js","mtime":1521721639653},{"path":"/home/alfredo/Code/vue-pdf/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/home/alfredo/Code/vue-pdf/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FormioUtils from 'formiojs/utils';\nexport default {\n  data: function data() {\n    return {};\n  },\n  methods: {\n    getComponentType: function getComponentType(key) {\n      var component = FormioUtils.getComponent(this.grid.components, key);\n      return component.type;\n    },\n    getComponentLabel: function getComponentLabel(key) {\n      var component = FormioUtils.getComponent(this.grid.components, key);\n      return component.label;\n    },\n    isComponentInput: function isComponentInput(key) {\n      var component = FormioUtils.getComponent(this.grid.components, key);\n      return component.input;\n    },\n    getComponentValues: function getComponentValues(key) {\n      return this.grid.rows.map(function (x) {\n        return x[key];\n      });\n    }\n  },\n  props: ['id', 'grid'],\n  computed: {\n    transpose: function transpose() {\n      return this.grid.rows.length < Object.keys(this.grid.rows[0]).length && Object.keys(this.grid.rows[0]).length > 5;\n    }\n  }\n};",{"version":3,"sources":["DataGridRender.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AAEA;wBAEA;WAEA,AACA;AACA;;qDAEA;qEACA;uBACA;AACA;uDACA;qEACA;uBACA;AACA;qDACA;qEACA;uBACA;AACA;yDACA;;iBACA;;AACA,AACA;AAhBA;gBAiBA;;oCAEA;sHACA;AACA,AACA;AAJA;AAxBA","sourceRoot":"src/utils/render/components","sourcesContent":["<template>\n  <div>\n    <h3 v-if=\"!grid.title\">{{ grid.title }}</h3>\n    <table class=\"table table-striped\" v-if=\"!transpose\">\n      <thead>\n        <tr>\n          <th v-for=\"component in grid.components\" :key=\"component\">{{ component.label }}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"row in grid.rows\" :key=\"row\">\n          <td v-for=\"(value, key) in row\" :key=\"key\">\n            <span v-if=\"isComponentInput(key)\">{{ value }}</span>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <table class=\"table table-striped\" v-else>\n      <tbody>\n        <tr v-for=\"column in grid.components\" :key=\"column\">\n          <th>{{ column.label }}</th>\n          <td v-for=\"value in getComponentValues(column.key)\" :key=\"value\">\n            <span v-if=\"isComponentInput(column.key)\">{{ value }}</span>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  \n</template>\n\n<script>\nimport FormioUtils from 'formiojs/utils'\n\nexport default {\n  data() {\n    return {\n      \n    };\n  },\n  methods: {\n    getComponentType (key) {\n      let component = FormioUtils.getComponent(this.grid.components, key)\n      return component.type\n    },\n    getComponentLabel (key) {\n      let component = FormioUtils.getComponent(this.grid.components, key)\n      return component.label\n    },\n    isComponentInput (key) {\n      let component = FormioUtils.getComponent(this.grid.components, key)\n      return component.input\n    },\n    getComponentValues (key) {\n      return this.grid.rows.map(x => x[key])\n    }\n  },\n  props: [ 'id', 'grid' ],\n  computed: {\n    transpose: function () {\n      return (this.grid.rows.length < Object.keys(this.grid.rows[0]).length && Object.keys(this.grid.rows[0]).length > 5)\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n"]}]}